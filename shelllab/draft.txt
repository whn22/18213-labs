
/* 
 * do_bgfg - Execute the builtin bg and fg commands
 */
void do_bgfg(char **argv) 
{
    struct job_t *job = NULL;        //要处理的job
    int state;                      //输入的命令
    int id;                         //存储jid或pid
    if (!strcmp(argv[0], "bg")) state = BG;
        else state = FG;  
    
    if (argv[1] == NULL) {               //没带参数
        printf("%s command requires PID or %%jobid argument\n", argv[0]);
        return;
    }

    if (argv[1][0] == '%') {             //说明是jid
       if (sscanf(&argv[1][1], "%d", &id) > 0) {
            job = job_get_pid(id);  //获得job
            if (job == NULL) {
                printf("%%%d: No such job\n", id);
                return;
            }
        }
    }

    else if (!isdigit(argv[1][0])) {  //其它符号，非法输入
        printf("%s: argument must be a PID or %%jobid\n", argv[0]);
        return;
    }

    else {                       //pid
        id = atoi(argv[1]);
        job = job_from_pid(id);
        if(job == NULL){
            printf("(%d): No such process\n", id);
            return;
        }
    }

    // kill(-(job->pid), SIGCONT);       //重启进程, 这里发送到进程组
    // job->state = state;
    // if(state == BG)
    //     printf("[%d] (%d) %s",job->jid, job->pid, job->cmdline);
    // else 
    //     waitfg(job->pid);
    // return;
}

/* 
 * builtin_cmd - If the user has typed a built-in command then execute
 *    it immediately.  
 */
int builtin_cmd(char **argv) 
{
    if (!strcmp(argv[0], "quit"))
        exit(0);
    if (!strcmp(argv[0], "bg") || !strcmp(argv[0], "fg")) {
        do_bgfg(argv);
        return 1;
    }
    if (!strcmp(argv[0], "jobs")) {
        list_jobs(1); // WARNNING: what is a file descriptor?
        return 1;
    }
    if (!strcmp(argv[0], "&"))
        return 1;
    return 0;     /* not a builtin command */
}
--------------------------------------------------------------------------------